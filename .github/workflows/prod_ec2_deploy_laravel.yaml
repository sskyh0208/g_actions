name: production deploy laravel for ec2

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'If run flow production deploy, input "production".'
        required: true
        default: ''

env:
  SRC_DIR: ./src/laravel
  PARAMETER_STORE_NAME: ${{ secrets.PROD_AWS_PARAMETER_STORE_ENV_FILE_NAME }}
  DEPLOY_APP_NAME: ${{ secrets.PROD_AWS_DEPLOY_APP_NAME }}
  DEPLOY_GROUP_NAME: ${{ secrets.PROD_AWS_DEPLOY_GROUP_NAME }}
  DEPLOY_SOURCE_BUCKET_NAME: ${{ secrets.PROD_AWS_DEPLOY_SOURCE_BUCKET_NAME }}
  IAM_ROLE_ARN: ${{ secrets.AWS_IAM_ROLE_GITHUBACTIONS_ARN}}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  ec2_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      # 入力値チェック
      - name: target varidate
        if: ${{ github.event_name != 'pull_request' && github.event.inputs.env != 'production' }}
        run: exit 1
      
      # BranchをCheckout
      - name: Checkout
        uses: actions/checkout@v3

      # アーカイブ用に必要ファイルをコピー
      - name: Copy required files for deployment archive
        run: |
          cp ./.github/appspec.yml ${{ env.SRC_DIR }}/appspec.yml
          mkdir ${{ env.SRC_DIR }}/scripts
          cp ./.github/scripts/* ${{ env.SRC_DIR }}/scripts/*

      # ODICによるAWS認証
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}

      # .envファイルの取得
      - name: Get .env file
        working-directory: ${{ env.SRC_DIR }}
        run: |
          aws ssm get-parameter \
          --with-decryption \
          --name ${{ env.PARAMETER_STORE_NAME }} \
          --query Parameter.Value | \
          sed -e 's/^"//' -e 's/"$//' -e 's/\\\"/\"/g' | \
          awk '{gsub(/\\n/,"\n")}1' > .env

      # 依存関係のインストール
      - name: Install dependencies
        working-directory: ${{ env.SRC_DIR }}
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      # ソースコードのアップロード
      - name: Deploy Laravel application to S3 and capture eTag
        id: s3-deploy
        working-directory: ${{ env.SRC_DIR }}
        run: |
          OUTPUT=$(aws deploy push \
            --application-name ${{ env.DEPLOY_APP_NAME }} \
            --s3-location s3://${{ env.DEPLOY_SOURCE_BUCKET_NAME }}/${{ github.run_id }}.zip --no-ignore-hidden-files)
          echo "$OUTPUT"
          ETAG=$(echo "$OUTPUT" | grep -oP 'eTag=\K[^ ]+')
          echo "etag=$ETAG" >> $GITHUB_OUTPUT

      # デプロイの実行
      - name: Create deployment with AWS CodeDeploy
        id: create-deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.DEPLOY_APP_NAME }} \
            --deployment-group-name ${{ env.DEPLOY_GROUP_NAME }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --s3-location bucket=${{ env.DEPLOY_SOURCE_BUCKET_NAME }},bundleType=zip,key=${{ github.run_id }}.zip,eTag=${{ steps.s3-deploy.outputs.etag }} \
            --query 'deploymentId' --output text)
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
      
      # デプロイの結果確認
      - name: Wait for deployment to complete
        id: wait-for-deployment
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment.outputs.deployment_id }}
      
      # デプロイ失敗した場合、原因を取得
      - name: Get deployment info and output failure reasons
        if: ${{ failure() }}
        run: |
          DEPLOYMENT_INFO=$(aws deploy get-deployment --deployment-id ${{ steps.create-deployment.outputs.deployment_id }})
          echo "$DEPLOYMENT_INFO"
          
          # JSONから失敗理由を抽出する（jqコマンドがインストールされている必要がある）
          FAILURE_REASONS=$(echo "$DEPLOYMENT_INFO" | jq -r '.deploymentInfo.errorInformation')
          echo "Failure reasons: $FAILURE_REASONS"

          FAILED_TARGET_ID=$(aws deploy list-deployment-targets \
            --deployment-id ${{ steps.create-deployment.outputs.deployment_id }} \
            --target-filters "{\"TargetStatus\":[\"Failed\"]}" \
            --query "targetIds[0]" \
            --output text)
          echo "Failed target id: $FAILED_TARGET_ID"
          
          # 失敗理由をステップのアウトプットとして設定
          DEPLOYMENT_TARGET_DETAILS=$(aws deploy get-deployment-target \
            --deployment-id ${{ steps.create-deployment.outputs.deployment_id }} \
            --target-id $FAILED_TARGET_ID)
          FAILURE_REASON=$(echo "$DEPLOYMENT_TARGET_DETAILS" | jq -r '.deploymentTarget.instanceTarget.lifecycleEvents[] | select(.status == "Failed") | .diagnostics.message')
          echo "Failure reason: $FAILURE_REASON"
            
      # Slack通知
      - name: Slack Notify
        if: ${{ always() }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,took,ref,author,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
